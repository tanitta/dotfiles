snippet     new
abbr        new
    auto ${1:#:obj} = new ${2:#:class};


snippet     import
abbr        import
    import ${1:std.stdio};
    
snippet     main
abbr        main
    void main(){
        ${0}
    }
    
snippet     writeln
abbr        writeln
    writeln(${0})${1};
    

snippet     class
abbr        class {}
    /++
    +/
	class ${1:#:name} {
		public{
        }//public
        
        private{
        }//private
	}//class $1
   
snippet     struct 
abbr        struct {}
    /++
    +/
	struct ${1:#:name} {
		public{
        }//public
        
        private{
        }//private
	}//struct $1

snippet     interface 
abbr        interface {}
    /++
    +/
	interface ${1:#:name} {
		public{
        }//public
        
        private{
        }//private
	}//interface $1

snippet    template 
abbr        template {}
    /++
    +/
	template ${1:#:name}(${2:#:T}) {
		public{
        }//public
        
        private{
        }//private
	}//template $1


snippet    enum 
abbr        enum {}
    /++
    +/
	enum ${1:#:name} {
	}//enum $1

snippet     comment
abbr        comment
options     head
    /++
        ${0}
    +/${1}
    

snippet    typecheck 
abbr       typecheck 
options     head
    if(
        __traits(compiles, (){
            ${0}
        })
    )
    

snippet    unittest 
abbr       unittest {}
	unittest{
        ${0}
	}
    


snippet    propGetter
abbr       propGetter
	$1 $2()const{return _$2;}
	${1:#:T} _${2:#:name};
	${0}
    
snippet    propSetter
abbr       propSetter
	void $2(in $1 ${3:v}){_$2 = $3;}
	${1:#:T} _${2:#:name};
	${0}
    
snippet    propAccessor
abbr       propAccessor
	$1 $2()const{return _$2;}
	void $2(in $1 ${3:v}){_$2 = $3;}
	${1:#:T} _${2:#:name};
	${0}
    
